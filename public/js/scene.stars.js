// Generated by CoffeeScript 1.10.0
(function() {
  namespace("scene.stars", function(exports) {
    var CREATE_STAR_CHANCE, DEEP_SPACE_VELOCITY, MAX_STARS, MIDDLE_SPACE_VELOCITY, NEAR_SPACE_VELOCITY, createStarField, ctx, deep, deepSpace, drawStarField, hasStars, interpolateColor, middle, middleSpace, near, nearSpace, rand, renderToCanvas, state;
    DEEP_SPACE_VELOCITY = 40;
    MIDDLE_SPACE_VELOCITY = 60;
    NEAR_SPACE_VELOCITY = 80;
    MAX_STARS = 1000;
    CREATE_STAR_CHANCE = 50;
    deepSpace = null;
    middleSpace = null;
    nearSpace = null;
    hasStars = false;
    state = {};
    ctx = null;
    deep = 0;
    middle = 0;
    near = 0;
    exports.setState = function(gameState) {
      state = gameState;
      DEEP_SPACE_VELOCITY = state.velocity / 3;
      MIDDLE_SPACE_VELOCITY = state.velocity / 2;
      return NEAR_SPACE_VELOCITY = state.velocity;
    };
    exports.render = function(contex, vx, fps) {
      ctx = contex;
      if (!hasStars) {
        deepSpace = renderToCanvas(ctx.canvas.width, ctx.canvas.height, function(ctx) {
          var j, len, ref, results, star;
          ref = createStarField(MAX_STARS);
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            star = ref[j];
            ctx.beginPath();
            ctx.arc(star.x, star.y, 1, 0, 2 * Math.PI, true);
            ctx.fillStyle = star.color;
            results.push(ctx.fill());
          }
          return results;
        });
        middleSpace = renderToCanvas(ctx.canvas.width, ctx.canvas.height, function(ctx) {
          var j, len, ref, results, star;
          ref = createStarField(MAX_STARS);
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            star = ref[j];
            ctx.beginPath();
            ctx.arc(star.x, star.y, 1, 0, 2 * Math.PI, true);
            ctx.fillStyle = star.color;
            results.push(ctx.fill());
          }
          return results;
        });
        nearSpace = renderToCanvas(ctx.canvas.width, ctx.canvas.height, function(ctx) {
          ctx.fillStyle = "rgba(3,3,3,.1)";
          ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
          ctx.fillStyle = "#000000";
          return ctx.strokeRect(0, 0, ctx.canvas.width, ctx.canvas.height - 1);

          /*
          for star in createStarField(MAX_STARS)
            ctx.beginPath()
            ctx.arc(star.x, star.y, 1, 0, 2 * Math.PI, true)
            ctx.fillStyle = star.color
            ctx.fill()
           */
        });
        return hasStars = true;
      } else {
        DEEP_SPACE_VELOCITY = (vx / 3) / fps;
        MIDDLE_SPACE_VELOCITY = (vx / 2) / fps;
        NEAR_SPACE_VELOCITY = vx / fps;
        if (vx > 0) {
          deep = (deep < ctx.canvas.width - 1 ? deep + DEEP_SPACE_VELOCITY : 0);
          drawStarField(-deep, deepSpace);
          middle = (middle < ctx.canvas.width - 1 ? middle + MIDDLE_SPACE_VELOCITY : 0);
          drawStarField(-middle, middleSpace);
          near = (near < ctx.canvas.width - 1 ? near + NEAR_SPACE_VELOCITY : 0);
          return drawStarField(-near, nearSpace);
        } else {
          deep = (deep > 0 ? deep + DEEP_SPACE_VELOCITY : ctx.canvas.width);
          drawStarField(-deep, deepSpace);
          middle = (middle > 0 ? middle + MIDDLE_SPACE_VELOCITY : ctx.canvas.width);
          drawStarField(-middle, middleSpace);
          near = (near > 0 ? near + NEAR_SPACE_VELOCITY : ctx.canvas.width);
          return drawStarField(-near, nearSpace);
        }
      }
    };
    drawStarField = function(offset, stars) {
      ctx.drawImage(stars, offset, 0);
      return ctx.drawImage(stars, offset + ctx.canvas.width, 0);
    };
    createStarField = function(count) {
      var chance, color, i, starField, x, y;
      starField = [];
      i = 0;
      while (i < count) {
        chance = rand(0, 100) < CREATE_STAR_CHANCE;
        if (chance) {
          x = rand(0, ctx.canvas.width * 2);
          y = rand(0, ctx.canvas.height);
          color = interpolateColor("000000", "FFFFFF", rand(0, 18), 1);
          starField.push(new Star(x, y, color));
        }
        i++;
      }
      return starField;
    };
    rand = function(min, max) {
      return parseInt(Math.random() * (max - min + 1), 10) + min;
    };
    interpolateColor = function(minColor, maxColor, maxDepth, depth) {
      var color, d2h, h2d, i, maxVal, minVal, nVal, val;
      d2h = function(d) {
        return d.toString(16);
      };
      h2d = function(h) {
        return parseInt(h, 16);
      };
      if (depth === 0) {
        return minColor;
      }
      if (depth === maxDepth) {
        return maxColor;
      }
      color = "#";
      i = 1;
      while (i <= 6) {
        minVal = new Number(h2d(minColor.substr(i, 2)));
        maxVal = new Number(h2d(maxColor.substr(i, 2)));
        nVal = minVal + (maxVal - minVal) * (depth / maxDepth);
        val = d2h(Math.floor(nVal));
        while (val.length < 2) {
          val = "0" + val;
        }
        color += val;
        i += 2;
      }
      return color;
    };
    return renderToCanvas = function(width, height, renderFunction) {
      var buffer;
      buffer = document.createElement("canvas");
      buffer.width = width;
      buffer.height = height;
      renderFunction(buffer.getContext("2d"));
      return buffer;
    };
  });

}).call(this);
